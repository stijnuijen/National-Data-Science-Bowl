{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"AML simple NN.ipynb","version":"0.3.2","provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"AeAEoO1aT-Ue","colab_type":"code","outputId":"4bbdd14c-8405-41c0-bdc1-62b07549b126","executionInfo":{"status":"ok","timestamp":1544008726157,"user_tz":-60,"elapsed":14139,"user":{"displayName":"Leon van Veldhuijzen","photoUrl":"","userId":"09155734321631331528"}},"colab":{"base_uri":"https://localhost:8080/","height":520}},"cell_type":"code","source":["# run first time \n","!pip install torch\n","!pip install torchvision\n","\n","!pip install Pillow==4.0.0\n","!pip install PIL\n","!pip install image"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: torch in /usr/local/lib/python3.6/dist-packages (0.4.1)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.6/dist-packages (0.2.1)\n","Collecting pillow>=4.1.1 (from torchvision)\n","  Using cached https://files.pythonhosted.org/packages/62/94/5430ebaa83f91cc7a9f687ff5238e26164a779cca2ef9903232268b0a318/Pillow-5.3.0-cp36-cp36m-manylinux1_x86_64.whl\n","Requirement already satisfied: torch in /usr/local/lib/python3.6/dist-packages (from torchvision) (0.4.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from torchvision) (1.11.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from torchvision) (1.14.6)\n","Installing collected packages: pillow\n","  Found existing installation: Pillow 4.0.0\n","    Uninstalling Pillow-4.0.0:\n","      Successfully uninstalled Pillow-4.0.0\n","Successfully installed pillow-5.3.0\n","Collecting Pillow==4.0.0\n","  Using cached https://files.pythonhosted.org/packages/37/e8/b3fbf87b0188d22246678f8cd61e23e31caa1769ebc06f1664e2e5fe8a17/Pillow-4.0.0-cp36-cp36m-manylinux1_x86_64.whl\n","Requirement already satisfied: olefile in /usr/local/lib/python3.6/dist-packages (from Pillow==4.0.0) (0.46)\n","\u001b[31mtorchvision 0.2.1 has requirement pillow>=4.1.1, but you'll have pillow 4.0.0 which is incompatible.\u001b[0m\n","Installing collected packages: Pillow\n","  Found existing installation: Pillow 5.3.0\n","    Uninstalling Pillow-5.3.0:\n","      Successfully uninstalled Pillow-5.3.0\n","Successfully installed Pillow-4.0.0\n","Collecting PIL\n","\u001b[31m  Could not find a version that satisfies the requirement PIL (from versions: )\u001b[0m\n","\u001b[31mNo matching distribution found for PIL\u001b[0m\n","Requirement already satisfied: image in /usr/local/lib/python3.6/dist-packages (1.5.27)\n","Requirement already satisfied: django in /usr/local/lib/python3.6/dist-packages (from image) (2.1.4)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.6/dist-packages (from image) (4.0.0)\n","Requirement already satisfied: pytz in /usr/local/lib/python3.6/dist-packages (from django->image) (2018.7)\n","Requirement already satisfied: olefile in /usr/local/lib/python3.6/dist-packages (from pillow->image) (0.46)\n"],"name":"stdout"}]},{"metadata":{"id":"Tr6E1hmaUBoJ","colab_type":"code","colab":{}},"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.optim import lr_scheduler\n","import numpy as np\n","import torchvision as tv\n","from torchvision import datasets, models, transforms\n","import matplotlib.pyplot as plt\n","import time\n","import os\n","import copy\n","import pandas as pd\n","\n","plt.ion()   # interactive mode"],"execution_count":0,"outputs":[]},{"metadata":{"id":"XPtWHOwQw-H5","colab_type":"code","colab":{}},"cell_type":"code","source":["# workaround \n","from PIL import Image\n","def register_extension(id, extension): Image.EXTENSION[extension.lower()] = id.upper()\n","Image.register_extension = register_extension\n","def register_extensions(id, extensions): \n","  for extension in extensions: register_extension(id, extension)\n","Image.register_extensions = register_extensions"],"execution_count":0,"outputs":[]},{"metadata":{"id":"QwJ0I8OWUVSA","colab_type":"code","outputId":"db7c2017-1519-4a11-fa63-57ecdcd3bc96","executionInfo":{"status":"ok","timestamp":1544008726374,"user_tz":-60,"elapsed":14234,"user":{"displayName":"Leon van Veldhuijzen","photoUrl":"","userId":"09155734321631331528"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"metadata":{"id":"DB7c4RYYU-oT","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"OyGqRx_LT-Uh","colab_type":"code","colab":{}},"cell_type":"code","source":["data_transforms = {\n","    'train': transforms.Compose([\n","        \n","                      \n","      \n","                      tv.transforms.Grayscale(num_output_channels=1),\n","                      transforms.Resize((28,28)),\n","                      transforms.ToTensor(),\n","                      \n","                     \n","                                                      ])\n","\n","}\n","\n","data_dir = \"drive/My Drive/AML_plankton_project/train_images \"\n","\n","image_datasets = {x: datasets.ImageFolder(data_dir, data_transforms[x]) for x in ['train']}\n","\n","\n","trainloader = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=24,\n","                                             shuffle=True, num_workers=4)\n","              for x in ['train']}\n","dataset_sizes = {x: len(image_datasets[x]) for x in ['train']}\n","class_names = image_datasets['train'].classes\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"i9EI6ijxT-Ul","colab_type":"code","colab":{}},"cell_type":"code","source":["# import torch.nn.functional as F\n","\n","\n","# class Net(nn.Module):\n","#     def __init__(self):\n","#         super(Net, self).__init__()\n","# #         self.layer1 = nn.Sequential(\n","# #             nn.Conv2d(1, 16, kernel_size=5, padding=2),\n","# #             nn.BatchNorm2d(16),\n","# #             nn.ReLU(),\n","# #             nn.MaxPool2d(2))\n","# #         self.layer2 = nn.Sequential(\n","# #             nn.Conv2d(16, 32, kernel_size=5, padding=2),\n","# #             nn.BatchNorm2d(32),\n","# #             nn.ReLU(),\n","# #             nn.MaxPool2d(2))\n","# #         self.fc = nn.Linear(5*5*32, 121) #7*7*32\n","#         self.conv1 = nn.Conv2d(1, 6, 5)\n","#         self.conv2 = nn.Conv2d(6, 12, 5)\n","#         self.fc1 = nn.Linear(12 * 5 * 5, 120)\n","#         self.fc2 = nn.Linear(120, 84)\n","#         self.fc3 = nn.Linear(84, 10)\n","\n","#     def forward(self, x):\n","#       x = F.relu(self.conv1(x))\n","# #       x = F.relu(self.conv2(x))\n","#       x = x.view(-1, 16 * 5 * 5)\n","#       x = F.relu(self.fc1(x))\n","#       x = F.relu(self.fc2(x))\n","#       x = self.fc3(x)\n","#       return x\n","# #         out = self.layer1(x)\n","# #         out = self.layer2(out)\n","# #         out = out.view(out.size(0), -1)\n","# #         out = self.fc(out)\n","# #         return out\n","\n","class CNN(nn.Module):\n","    def __init__(self):\n","        super(CNN, self).__init__()\n","        self.layer1 = nn.Sequential(\n","            nn.Conv2d(1, 16, kernel_size=5, padding=2),\n","            nn.BatchNorm2d(16),\n","            nn.ReLU(),\n","            nn.MaxPool2d(2))\n","        self.layer2 = nn.Sequential(\n","            nn.Conv2d(16, 32, kernel_size=5, padding=2),\n","            nn.BatchNorm2d(32),\n","            nn.ReLU(),\n","            nn.MaxPool2d(2))\n","        self.fc = nn.Linear(7*7*32, 121)\n","\n","    def forward(self, x):\n","        out = self.layer1(x)\n","        out = self.layer2(out)\n","        out = out.view(out.size(0), -1)\n","        out = self.fc(out)\n","        return out\n","\n","net = CNN()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"crr3GRwpVGeR","colab_type":"text"},"cell_type":"markdown","source":["# Enable GPU"]},{"metadata":{"id":"bymcpW7xVIOX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":33},"outputId":"fa34a38b-a857-405d-f656-fcce7f34f350","executionInfo":{"status":"ok","timestamp":1544011751351,"user_tz":-60,"elapsed":441,"user":{"displayName":"Leon van Veldhuijzen","photoUrl":"","userId":"09155734321631331528"}}},"cell_type":"code","source":["device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","net.to(device)\n","print(device)"],"execution_count":62,"outputs":[{"output_type":"stream","text":["cuda:0\n"],"name":"stdout"}]},{"metadata":{"id":"P20zgpoET-Um","colab_type":"code","colab":{}},"cell_type":"code","source":["import torch.optim as optim\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"B__jAI7MT-Up","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":828},"outputId":"b0d99510-268a-4771-ecb1-31f5cb309b83","executionInfo":{"status":"error","timestamp":1544011753676,"user_tz":-60,"elapsed":716,"user":{"displayName":"Leon van Veldhuijzen","photoUrl":"","userId":"09155734321631331528"}}},"cell_type":"code","source":["for epoch in range(10):  # loop over the dataset multiple times\n","    print(epoch)\n","#     running_loss = 0.0\n","    for i, data in enumerate(trainloader['train'], 0):\n","        # get the inputs\n","        inputs, labels = data\n","                \n","        inputs, labels = inputs.to(device), labels.to(device)\n","\n","        # zero the parameter gradients\n","        optimizer.zero_grad()\n","\n","        # forward + backward + optimize\n","        outputs = net(inputs)\n","        \n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","#         # print statistics\n","#         running_loss += loss.item()\n","#         if i % 2000 == 1999:    # print every 2000 mini-batches\n","#             print('[%d, %5d] loss: %.3f' %\n","#                   (epoch + 1, i + 1, running_loss / 2000))\n","#             running_loss = 0.0\n","\n","print('Finished Training')"],"execution_count":63,"outputs":[{"output_type":"stream","text":["0\n"],"name":"stdout"},{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-63-72a26a99852c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0;31m# forward + backward + optimize\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m         \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    475\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    476\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 477\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    478\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    479\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-61-fb14b986438b>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     19\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayer2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    475\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    476\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 477\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    478\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    479\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/linear.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbias\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     56\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mextra_repr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/functional.py\u001b[0m in \u001b[0;36mlinear\u001b[0;34m(input, weight, bias)\u001b[0m\n\u001b[1;32m   1022\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mbias\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1023\u001b[0m         \u001b[0;31m# fused op is marginally faster\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1024\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maddmm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbias\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1026\u001b[0m     \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmatmul\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: size mismatch, m1: [24 x 6272], m2: [1568 x 121] at /pytorch/aten/src/THC/generic/THCTensorMathBlas.cu:249"]}]},{"metadata":{"id":"0_CvRjBFT-Uu","colab_type":"code","colab":{}},"cell_type":"code","source":["import torch\n","from torchvision import datasets\n","\n","class ImageFolderWithPaths(datasets.ImageFolder):\n","    \"\"\"Custom dataset that includes image paths. Extends\n","    torchvision.datasets.ImageFolder\n","    \"\"\"\n","\n","    # override the __getitem__ method that dataloader calls\n","    def __getitem__(self, index):\n","\n","        path, target = self.imgs[index]\n","        img = self.loader(path)\n","        if self.transform is not None:\n","            img = self.transform(img)\n","        if self.target_transform is not None:\n","            target = self.target_transform(target)\n","        \n","        image_name = path.split('/')[-1]\n","\n","        return img, target, image_name\n","\n","    def __len__(self):\n","        return len(self.imgs)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"LzBHkV5VT-Ux","colab_type":"code","colab":{}},"cell_type":"code","source":["data_transforms_TEST = {\n","    'test': transforms.Compose([\n","                      tv.transforms.Grayscale(num_output_channels=1),\n","                      transforms.Resize((28,28)),\n","                      transforms.ToTensor(),\n","                               ])\n","\n","}\n","\n","data_dir_TEST = 'drive/My Drive/AML_plankton_project/test_images'\n","\n","image_datasets_TEST = {x: ImageFolderWithPaths(data_dir_TEST, data_transforms_TEST[x]) for x in ['test']}\n","\n","\n","testloader = {x: torch.utils.data.DataLoader(image_datasets_TEST[x], batch_size=4,\n","                                             shuffle=True, num_workers=4)\n","              for x in ['test']}\n","dataset_sizes_TEST = {x: len(image_datasets_TEST[x]) for x in ['test']}"],"execution_count":0,"outputs":[]},{"metadata":{"id":"k7TXM4m8T-Uz","colab_type":"code","colab":{}},"cell_type":"code","source":["image_classes = []\n","image_names = []\n","\n","with torch.no_grad():\n","    for data in testloader['test']:\n","        images, labels, path = data\n","        images, labels = images.to(device), labels.to(device)\n","        outputs = net(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        image_classes.extend(predicted.tolist())\n","        img_name = list(path)\n","        image_names.extend(img_name)\n","        \n","predictions = pd.DataFrame({'image': image_names, 'class': image_classes})\n","    \n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"1GN1JkPTT-U3","colab_type":"code","colab":{}},"cell_type":"code","source":["sample_file = pd.read_csv('drive/My Drive/AML_plankton_project/sample.csv')\n","sample_file = sample_file.drop('class', axis=1)\n","output_file = pd.merge(sample_file, predictions, on ='image')\n","output_file.to_csv('output_1d_10.csv', index=False)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"tEhHxB5_T-U6","colab_type":"code","colab":{}},"cell_type":"code","source":["from google.colab import files\n","\n","files.download(\"output_1d_10.csv\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"QlOGu1YfT-U9","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"5GgjTCCtT-VA","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"86Q5H6P-T-VB","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"WgztcYmnT-VE","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"htH9ZRWCT-VH","colab_type":"code","colab":{}},"cell_type":"code","source":["\n"],"execution_count":0,"outputs":[]}]}