{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Kopie van Keras_model.ipynb","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"7Hhz5JQqtDs9","colab_type":"code","colab":{}},"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D\n","\n","\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import os \n","import cv2\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"hjQPSPk-tMWN","colab_type":"code","outputId":"14406fa6-0649-47fa-e598-b84112f2907a","executionInfo":{"status":"ok","timestamp":1544086229013,"user_tz":-60,"elapsed":30996,"user":{"displayName":"Leon van Veldhuijzen","photoUrl":"","userId":"09155734321631331528"}},"colab":{"base_uri":"https://localhost:8080/","height":120}},"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"metadata":{"id":"v3h8GZ2YtDtN","colab_type":"code","colab":{}},"cell_type":"code","source":["DATADIR = \"drive/My Drive/AML_plankton_project/train_images \"\n","CATEGORIES = [str(i) for i in range(121)]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"zlRuzK8jtDtT","colab_type":"code","outputId":"6d30a207-3c7f-4eb4-bbab-3e36a36d7905","colab":{}},"cell_type":"code","source":["\n","    "],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<matplotlib.figure.Figure at 0x206ee54deb8>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"Li2f5XcItDtb","colab_type":"code","colab":{}},"cell_type":"code","source":["# IMG_SIZE = 95\n","\n","\n","# plt.imshow(new_array, cmap = \"gray\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"uOXdaKsatDth","colab_type":"code","colab":{}},"cell_type":"code","source":["IMG_SIZE = 95\n","\n","training_data = []\n","\n","def create_training_data():\n","    for index, category in enumerate(CATEGORIES,0):\n","        # print(DATADIR, category)\n","        path = os.path.join(DATADIR, category) \n","        class_num = index\n","        for img in os.listdir(path):\n","            img_array = cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)\n","            new_array = cv2.resize(img_array,(IMG_SIZE, IMG_SIZE))\n","            training_data.append([new_array, class_num])\n","            \n","create_training_data()\n","        "],"execution_count":0,"outputs":[]},{"metadata":{"id":"88jtuu7otDtn","colab_type":"code","outputId":"030c6778-751f-4f10-8ab0-87b9a79d50f7","executionInfo":{"status":"ok","timestamp":1544094955484,"user_tz":-60,"elapsed":519,"user":{"displayName":"Leon van Veldhuijzen","photoUrl":"","userId":"09155734321631331528"}},"colab":{"base_uri":"https://localhost:8080/","height":150}},"cell_type":"code","source":["print(len(training_data))\n","\n","print(training_data[0])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["24222\n","[array([[255, 255, 255, ..., 255, 255, 255],\n","       [255, 255, 255, ..., 255, 255, 255],\n","       [255, 255, 255, ..., 255, 255, 255],\n","       ...,\n","       [255, 255, 255, ..., 255, 255, 255],\n","       [255, 255, 255, ..., 255, 255, 255],\n","       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8), 0]\n"],"name":"stdout"}]},{"metadata":{"id":"TKFRQdsytDtu","colab_type":"code","colab":{}},"cell_type":"code","source":["import random \n","\n","random.shuffle(training_data)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"kYUBOPbgtDt2","colab_type":"code","outputId":"b48e6235-4fd5-4659-d156-855a0c1ae00a","executionInfo":{"status":"ok","timestamp":1544095325495,"user_tz":-60,"elapsed":580,"user":{"displayName":"Leon van Veldhuijzen","photoUrl":"","userId":"09155734321631331528"}},"colab":{"base_uri":"https://localhost:8080/","height":183}},"cell_type":"code","source":["for sample in training_data[:10]:\n","    print(sample[1])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["12\n","99\n","94\n","101\n","26\n","42\n","119\n","58\n","100\n","42\n"],"name":"stdout"}]},{"metadata":{"id":"dFsv7ZRMtDuA","colab_type":"code","colab":{}},"cell_type":"code","source":["\n","X = []\n","y = []\n","\n","class_weight = {}\n","\n","for features, label in training_data:\n","    \n","    X.append(features)\n","    \n","    one_hot = [0 for i in range(121)]\n","    one_hot[label] = 1\n","    \n","    y.append(one_hot)\n","    \n","    if label in class_weight:\n","      class_weight[label] += 1.0\n","      \n","    else:\n","      class_weight[label] = 1.0\n","      \n","    \n","X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1) \n","y = np.array(y)\n","\n","# create class weights\n","for class_num in class_weight:\n","  class_weight[class_num] = 1 - (class_weight[class_num] / len(y))\n","  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"2cMg_2GzaBxK","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"cuPWabBUtDuG","colab_type":"code","outputId":"91516738-acb8-4516-b51f-d11fce0b1125","executionInfo":{"status":"ok","timestamp":1544095334114,"user_tz":-60,"elapsed":498,"user":{"displayName":"Leon van Veldhuijzen","photoUrl":"","userId":"09155734321631331528"}},"colab":{"base_uri":"https://localhost:8080/","height":83}},"cell_type":"code","source":["print(y[0])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0]\n"],"name":"stdout"}]},{"metadata":{"id":"iHGKAhXOtDuS","colab_type":"code","colab":{}},"cell_type":"code","source":["X = X/225.0 # normalize"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Zq2EjdoDtDuZ","colab_type":"code","outputId":"f16f173b-e81d-45e6-e37f-59e7a437b422","executionInfo":{"status":"ok","timestamp":1544095991732,"user_tz":-60,"elapsed":225562,"user":{"displayName":"Leon van Veldhuijzen","photoUrl":"","userId":"09155734321631331528"}},"colab":{"base_uri":"https://localhost:8080/","height":383}},"cell_type":"code","source":["model = Sequential()\n","N_Classes = 121\n","\n","# model.add(InputLayer())\n","model.add(Conv2D(64,(3,3),padding = \"same\", input_shape = X.shape[1:]))\n","model.add(Activation(\"relu\"))\n","model.add(MaxPooling2D(pool_size=(2,2)))\n","model.add(Dropout(0.25))\n","\n","model.add(Conv2D(64, (3,3), padding = \"same\"))\n","model.add(Activation(\"relu\"))\n","model.add(MaxPooling2D(pool_size=(2,2)))\n","model.add(Dropout(0.25))\n","\n","model.add(Conv2D(64, (3,3), padding = \"same\"))\n","model.add(Activation(\"relu\"))\n","model.add(MaxPooling2D(pool_size=(2,2)))\n","model.add(Dropout(0.25))\n","\n","model.add(Flatten())\n","model.add(Dense(100))\n","model.add(Dense(N_Classes, activation='softmax'))\n","\n","model.compile(loss = \"categorical_crossentropy\",\n","             optimizer = \"adam\",\n","             metrics = [\"accuracy\"])\n","\n","\n","\n","model.fit(X, y, batch_size = 64, epochs = 10, validation_split = 0.1, class_weight = class_weight)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Train on 21799 samples, validate on 2423 samples\n","Epoch 1/10\n","21799/21799 [==============================] - 23s 1ms/step - loss: 3.4198 - acc: 0.2205 - val_loss: 2.6328 - val_acc: 0.3533\n","Epoch 2/10\n","21799/21799 [==============================] - 23s 1ms/step - loss: 2.4351 - acc: 0.3787 - val_loss: 2.4388 - val_acc: 0.3946\n","Epoch 3/10\n","21799/21799 [==============================] - 22s 1ms/step - loss: 2.1746 - acc: 0.4295 - val_loss: 2.2460 - val_acc: 0.4259\n","Epoch 4/10\n","21799/21799 [==============================] - 22s 1ms/step - loss: 2.0171 - acc: 0.4646 - val_loss: 2.1533 - val_acc: 0.4457\n","Epoch 5/10\n","21799/21799 [==============================] - 22s 1ms/step - loss: 1.9118 - acc: 0.4852 - val_loss: 2.0868 - val_acc: 0.4631\n","Epoch 6/10\n","21799/21799 [==============================] - 22s 1ms/step - loss: 1.8330 - acc: 0.5008 - val_loss: 2.0904 - val_acc: 0.4705\n","Epoch 7/10\n","21799/21799 [==============================] - 22s 1ms/step - loss: 1.7520 - acc: 0.5185 - val_loss: 2.0815 - val_acc: 0.4676\n","Epoch 8/10\n","21799/21799 [==============================] - 22s 1ms/step - loss: 1.7080 - acc: 0.5291 - val_loss: 2.0450 - val_acc: 0.4787\n","Epoch 9/10\n","21799/21799 [==============================] - 23s 1ms/step - loss: 1.6118 - acc: 0.5465 - val_loss: 2.0427 - val_acc: 0.4767\n","Epoch 10/10\n","21799/21799 [==============================] - 23s 1ms/step - loss: 1.5364 - acc: 0.5697 - val_loss: 2.0767 - val_acc: 0.4858\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fba33d17898>"]},"metadata":{"tags":[]},"execution_count":15}]},{"metadata":{"id":"njaHFNPzSb2l","colab_type":"code","outputId":"6234ef3e-dc8d-442b-ad49-54ab9139b597","executionInfo":{"status":"ok","timestamp":1544097120832,"user_tz":-60,"elapsed":111465,"user":{"displayName":"Leon van Veldhuijzen","photoUrl":"","userId":"09155734321631331528"}},"colab":{"base_uri":"https://localhost:8080/","height":217}},"cell_type":"code","source":["model.fit(X, y, batch_size = 64, epochs = 5, validation_split = 0.1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Train on 21799 samples, validate on 2423 samples\n","Epoch 1/5\n","21799/21799 [==============================] - 22s 1ms/step - loss: 1.1338 - acc: 0.6716 - val_loss: 2.0572 - val_acc: 0.4998\n","Epoch 2/5\n","21799/21799 [==============================] - 22s 1ms/step - loss: 0.8228 - acc: 0.7493 - val_loss: 2.2229 - val_acc: 0.5002\n","Epoch 3/5\n","21799/21799 [==============================] - 22s 1ms/step - loss: 0.7509 - acc: 0.7655 - val_loss: 2.2218 - val_acc: 0.5056\n","Epoch 4/5\n","21799/21799 [==============================] - 22s 1ms/step - loss: 0.7298 - acc: 0.7712 - val_loss: 2.2948 - val_acc: 0.5056\n","Epoch 5/5\n","21799/21799 [==============================] - 22s 1ms/step - loss: 0.6814 - acc: 0.7875 - val_loss: 2.2821 - val_acc: 0.5163\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fba33db7e10>"]},"metadata":{"tags":[]},"execution_count":24}]},{"metadata":{"id":"65IKQZ8dtDuf","colab_type":"code","outputId":"323e44e1-eced-4198-80b8-cc479df89c8d","executionInfo":{"status":"ok","timestamp":1544096469503,"user_tz":-60,"elapsed":93916,"user":{"displayName":"Leon van Veldhuijzen","photoUrl":"","userId":"09155734321631331528"}},"colab":{"base_uri":"https://localhost:8080/","height":133}},"cell_type":"code","source":["from keras.preprocessing.image import ImageDataGenerator \n","\n","train_generator = ImageDataGenerator(\n","    \n","    rotation_range = 360,\n","    width_shift_range = 0.2,\n","    height_shift_range = 0.2,\n","    shear_range = 0.2,\n","    zoom_range = 0.2,\n","    horizontal_flip = True,\n","    vertical_flip = True,\n","    fill_mode = 'nearest'\n","\n",")\n","\n","val_generator = ImageDataGenerator(\n","    \n","    horizontal_flip = True,\n","    vertical_flip = True,\n","\n",")\n","\n","train_generator.fit(X) # computes quantities required for featurewise normalization\n","\n","N_epochs = 3\n","Batch_size = 64\n","\n","# fits the model on batches with real-time data augmentation:\n","model.fit_generator(train_generator.flow(X, y, batch_size = Batch_size),\n","                    steps_per_epoch=len(X) / Batch_size, epochs = N_epochs)\n","    "],"execution_count":0,"outputs":[{"output_type":"stream","text":["Epoch 1/3\n","379/378 [==============================] - 30s 79ms/step - loss: 2.9305 - acc: 0.2712\n","Epoch 2/3\n","379/378 [==============================] - 31s 83ms/step - loss: 2.7652 - acc: 0.2984\n","Epoch 3/3\n","379/378 [==============================] - 30s 80ms/step - loss: 2.7195 - acc: 0.3060\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fba33db7dd8>"]},"metadata":{"tags":[]},"execution_count":19}]},{"metadata":{"id":"CXYQg0BRUn_1","colab_type":"code","outputId":"7b52bba3-bfba-48fe-cf79-851abdb28c23","executionInfo":{"status":"ok","timestamp":1544096967378,"user_tz":-60,"elapsed":92886,"user":{"displayName":"Leon van Veldhuijzen","photoUrl":"","userId":"09155734321631331528"}},"colab":{"base_uri":"https://localhost:8080/","height":133}},"cell_type":"code","source":["model.fit_generator(train_generator.flow(X, y, batch_size = Batch_size),\n","                    steps_per_epoch=len(X) / Batch_size, epochs = N_epochs)\n","    "],"execution_count":0,"outputs":[{"output_type":"stream","text":["Epoch 1/3\n","379/378 [==============================] - 31s 81ms/step - loss: 3.2255 - acc: 0.2306\n","Epoch 2/3\n","379/378 [==============================] - 31s 81ms/step - loss: 2.8592 - acc: 0.2826\n","Epoch 3/3\n","379/378 [==============================] - 31s 81ms/step - loss: 2.7500 - acc: 0.3025\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fba42bc5860>"]},"metadata":{"tags":[]},"execution_count":23}]},{"metadata":{"id":"zF1sqDr5uIvv","colab_type":"text"},"cell_type":"markdown","source":["# Test and Write"]},{"metadata":{"id":"nFO8KdFguHef","colab_type":"code","colab":{}},"cell_type":"code","source":["from PIL import Image\n","\n","directory_in_str = \"drive/My Drive/AML_plankton_project/test_images/test\"\n","\n","\n","results = list()\n","\n","\n","for file in os.listdir(directory_in_str):\n","    if file.endswith(\".jpg\"):\n","        \n","        filename = os.fsdecode(file)\n","        image_path = os.path.join(directory_in_str, filename)\n","        \n","        img_array = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n","        new_array = cv2.resize(img_array,(IMG_SIZE, IMG_SIZE))\n","        norm_array = new_array / 255\n","        norm_array = np.array(norm_array).reshape(-1,IMG_SIZE, IMG_SIZE, 1) \n","        prediction = model.predict_classes(norm_array)\n","        \n","        results.append([filename, prediction[0]])\n","        \n","        \n","\n","# print(results)            \n","test_results = pd.DataFrame(results, columns= [\"image\",\"class\"])\n","\n","print(test_results)\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Uu_imkltuiXg","colab_type":"code","colab":{}},"cell_type":"code","source":["test_results.to_csv('output_eerste_keras.csv', index=False)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"lxEPeynmujaH","colab_type":"code","colab":{}},"cell_type":"code","source":["from google.colab import files\n","\n","files.download(\"output_eerste_keras.csv\")"],"execution_count":0,"outputs":[]}]}